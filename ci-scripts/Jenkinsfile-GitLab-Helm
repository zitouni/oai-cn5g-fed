#!/bin/groovy
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

//-------------------------------------------------------------------------------
// Abstraction function to send social media messages:
// like on Slack or Mattermost
def sendSocialMediaMessage(pipeChannel, pipeColor, pipeMessage) {
  if (params.pipelineUsesSlack != null) {
    if (params.pipelineUsesSlack) {
      slackSend channel: pipeChannel, color: pipeColor, message: pipeMessage
    }
  }
}

// Location of the CN executor node
def cn_ci_host = params.Host_CN_CI_Server

// for lock
def cn_ci_resource = params.CN_CI_Resource
def ds_tester_ci_resource = params.DsTester

// Location of the DsTester workspace
def dsTestFrameworkLocation = params.dsTestFrameworkLocation

// When triggered by upstream, specify which tag to use
def upstreamTagToUse = params.upstreamTagToUse

// Location of the CN tester
def dsT_host_flag = false
def dsT_host = ""
def dsT_host_user = ""
def dsT_host_ip_addr = ""

// Flags
def scmEvent = false
def upstreamEvent = false

// Default tags  --> could be passed on by upstream job or by PR content
def nrfTag = params.nrfTag
def amfTag = params.amfTag
def smfTag = params.smfTag
def spgwuTag = params.spgwuTag

//-------------------------------------------------------------------------------
// Pipeline start
pipeline {
  agent {
    label cn_ci_host
  }
  options {
    disableConcurrentBuilds()
    timestamps()
    ansiColor('xterm')
    lock(cn_ci_resource)
  }
  stages {
    stage ('Verify Parameters') {
      steps {
        script {
          echo '\u2705 \u001B[32mVerify Parameters\u001B[0m'

          JOB_TIMESTAMP = sh returnStdout: true, script: 'date --utc --rfc-3339=seconds | sed -e "s#+00:00##"'
          JOB_TIMESTAMP = JOB_TIMESTAMP.trim()

          def allParametersPresent = true
          if (params.remote_IPAddress == null) {
            allParametersPresent = false
          }
          if (params.remote_Credentials == null) {
            allParametersPresent = false
          }
          if (params.OC_Credentials == null) {
            allParametersPresent = false
          }
          if (params.OC_ProjectName == null) {
            allParametersPresent = false
          }
          if (allParametersPresent) {
            echo "Cluster Access parameters are present"
          } else {
            echo "Some Cluster Access parameters are missing"
            sh "./ci-scripts/fail.sh"
          }
          if (params.DS_Tester_Server_Flag != null) {
            dsT_host_flag = params.DS_Tester_Server_Flag
            if (dsT_host_flag) {
              allParametersPresent = true
              if (params.DS_Tester_Server_Name == null) {
                allParametersPresent = false
              } else {
                dsT_host = params.DS_Tester_Server_Name
              }
              if (params.DS_Tester_Server_Login == null) {
                allParametersPresent = false
              } else {
                dsT_host_user = params.DS_Tester_Server_Login
              }
              if (params.DS_Tester_Server_IP_Addr == null) {
                allParametersPresent = false
              } else {
                dsT_host_ip_addr = params.DS_Tester_Server_IP_Addr
              }
              if (allParametersPresent) {
                echo "DS Tester  is on ${dsT_host}"
              } else {
                echo "Some DS Tester parameters are missing!"
                sh "./ci-scripts/fail.sh"
              }
            }
          }

          // Find out the cause of the trigger
          for (cause in currentBuild.getBuildCauses()) {
            if (cause.toString() ==~ /.*UpstreamCause.*/) {
              upstreamEvent = true
            //} else {
            //  scmEvent = true
            }
          }
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.remote_Credentials}", usernameVariable: 'remote_Username', passwordVariable: 'remote_Password'],
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.OC_Credentials}", usernameVariable: 'OC_Username', passwordVariable: 'OC_Password']
          ]) {
            if (upstreamEvent) {
              if (params.NRF_TAG != null) {
                nrfTag = params.NRF_TAG
                echo "Upstream Job passed NRF_TAG to use: ${nrfTag}"
              }
              if (params.AMF_TAG != null) {
                amfTag = params.AMF_TAG
                echo "Upstream Job passed AMF_TAG to use: ${amfTag}"
              }
              if (params.SMF_TAG != null) {
                smfTag = params.SMF_TAG
                echo "Upstream Job passed SMF_TAG to use: ${smfTag}"
              }
              sh "git clean -x -d -f > /dev/null 2>&1"
              sh "git fetch --prune > /dev/null 2>&1"
              sh 'git checkout -f ' + upstreamTagToUse
              sh "zip -r -qq oai-cn5g-fed.zip .git"
              sh "mkdir -p archives DS-TEST-RESULTS"
              // Prepare the workspace in the remote server 
              copyTo2ndServer('oai-cn5g-fed.zip', true, ${remote_Username}, ${params.remote_IPAddress})
              myShCmd('git clean -x -d -f > /dev/null 2>&1', true, ${remote_Username}, ${params.remote_IPAddress})
              myShCmd('mkdir -p archives DS-TEST-RESULTS', true, ${remote_Username}, ${params.remote_IPAddress})
            }
            if (scmEvent) {
              sh "git clean -x -d -f > /dev/null 2>&1"
              if ("MERGE".equals(env.gitlabActionType)) {
                sh "./ci-scripts/doGitLabMerge.sh --src-branch ${env.gitlabSourceBranch} --src-commit ${env.gitlabMergeRequestLastCommit} --target-branch ${env.gitlabTargetBranch} --target-commit ${GIT_COMMIT}"
              }
              sh "zip -r -qq oai-cn5g-fed.zip .git"
              sh "mkdir -p archives DS-TEST-RESULTS"
              // Prepare the workspace in remote server
              copyTo2ndServer('oai-cn5g-fed.zip', true, ${remote_Username}, ${params.remote_IPAddress})
              myShCmd('git clean -x -d -f > /dev/null 2>&1', true, ${remote_Username}, ${params.remote_IPAddress})
              if ("MERGE".equals(env.gitlabActionType)) {
                myShCmd("./ci-scripts/doGitLabMerge.sh --src-branch ${env.gitlabSourceBranch} --src-commit ${env.gitlabMergeRequestLastCommit} --target-branch ${env.gitlabTargetBranch} --target-commit ${GIT_COMMIT}", new_host_flag, new_host_user, new_host)
              }
              myShCmd('mkdir -p archives DS-TEST-RESULTS', true, ${remote_Username}, ${params.remote_IPAddress})
            }
            if ((!upstreamEvent) && (!scmEvent)) {
              sh "git clean -x -d -f > /dev/null 2>&1"
              sh "zip -r -qq oai-cn5g-fed.zip .git"
              sh "mkdir -p archives DS-TEST-RESULTS"
              // Prepare the workspace in the remote server 
              copyTo2ndServer('oai-cn5g-fed.zip', true, remote_Username, params.remote_IPAddress)
              myShCmd('git clean -x -d -f > /dev/null 2>&1', true, remote_Username, params.remote_IPAddress)
              myShCmd('mkdir -p archives DS-TEST-RESULTS', true, remote_Username, params.remote_IPAddress)
            }
            imageTags = "mysql:5.7.30,oai-nrf:${nrfTag},oai-amf:${amfTag},oai-smf:${smfTag},oai-spgwu-tiny:${spgwuTag}"
          }
        }
      }
    }
    stage ('Deploy Whole 5G Core Network') {
      steps {
        script {
          echo '\u2705 \u001B[32mDeploy CN5G in idle mode\u001B[0m'
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.remote_Credentials}", usernameVariable: 'remote_Username', passwordVariable: 'remote_Password'],
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.OC_Credentials}", usernameVariable: 'OC_Username', passwordVariable: 'OC_Password']
          ]) {
            dir('ci-scripts') {
              try {
                sh "python3 helmDeploy.py --mode=Deploy --remoteIPAdd=${params.remote_IPAddress} --remoteUserName=${remote_Username} --remotePassword=${remote_Password} --OCUserName=${OC_Username} --OCPassword=${OC_Password} --OCProjectName=${OC_ProjectName} --imageTags=${imageTags}"
              } catch (Exception e) {
                currentBuild.result = 'FAILURE'
              }
            }
          }
        }
      }
    }
    stage ('Undeploy 5G-CN') {
      steps {
        script {
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.remote_Credentials}", usernameVariable: 'remote_Username', passwordVariable: 'remote_Password'],
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.OC_Credentials}", usernameVariable: 'OC_Username', passwordVariable: 'OC_Password']
          ]) {
            dir('ci-scripts') {
              try {
                sh "python3 helmDeploy.py --mode=UnDeploy --remoteIPAdd=${params.remote_IPAddress} --remoteUserName=${remote_Username} --remotePassword=${remote_Password} --OCUserName=${OC_Username} --OCPassword=${OC_Password} --OCProjectName=${OC_ProjectName} --imageTags=${imageTags}"
              } catch (Exception e) {
                currentBuild.result = 'FAILURE'
              }
            }
          }
        }
      }
    }
  }
}

// Functions

def copyTo2ndServer(filename, flag, user, host) {
  if (flag) {
    if ("oai-cn5g-fed.zip".equals(filename)) {
      sh "ssh ${user}@${host} 'rm -rf /tmp/CI-CN5G-FED-RHEL8'"
      sh "ssh ${user}@${host} 'mkdir -p /tmp/CI-CN5G-FED-RHEL8'"
    }
    sh "scp ${filename} ${user}@${host}:/tmp/CI-CN5G-FED-RHEL8"
    if ("oai-cn5g-fed.zip".equals(filename)) {
      sh "ssh ${user}@${host} 'cd /tmp/CI-CN5G-FED-RHEL8 && unzip -qq oai-cn5g-fed.zip && rm oai-cn5g-fed.zip'"
      sh "ssh ${user}@${host} 'cd /tmp/CI-CN5G-FED-RHEL8 && git checkout -f ${GIT_COMMIT}'"
      sh "ssh ${user}@${host} 'cd /tmp/CI-CN5G-FED-RHEL8 && git log -n1'"
    }
  }
}

def copyFrom2ndServer(filename, target, flag, user, host) {
  if (flag) {
    sh "scp ${user}@${host}:/tmp/CI-CN5G-FED-RHEL8/${filename} ${target}"
  }
}

def myShCmd(cmd, flag, user, host) {
  if (flag) {
    sh "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN5G-FED-RHEL8 && ${cmd}'"
  } else {
    sh "${cmd}"
  }
}

def myShCmdWithLog(cmd, logFile, flag, user, host) {
  if (flag) {
    sh "ssh -t -t ${user}@${host} 'export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:.:/usr/local/devsol/bin && ${cmd}' > ${logFile} 2>&1"
  } else {
    sh "${cmd} > ${logFile} 2>&1"
  }
}

def myShRetCmd(cmd, flag, user, host) {
  if (flag) {
    ret = sh returnStdout: true, script: "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN5G-FED-RHEL8 && ${cmd}'"
  } else {
    ret = sh returnStdout: true, script: "${cmd}"
  }
  ret = ret.trim()
  return ret
}
